#include <iostream>
#include <math.h>
using namespace std;

struct node {
  int data;
  node *left=NULL,*right=NULL;
};
class bst{
   
 public:
   node *root;
  bst(){
    root=NULL;
  }
   void create(){
     cout<<"Enter the number of element you want to insert:";
     int n;
     cin>>n;
     while(n--){
       insert();
     }
   }
  void insert(){
    node *curr,*temp;
    curr=new node;
    cout<<"Enter data:";
    cin>>curr->data;
    if(root==NULL){
      root=curr;
    }
    else{
      temp=root;
      while(1){
      if(curr->data<=temp->data){
        if(temp->left==NULL){
          temp->left=curr;
          break;
        }
        else {
          temp=temp->left;
        }
      }
      else {
        if(temp->right==NULL){
          temp->right =curr;
          break;
        }
        else{
          temp=temp->right;
        }
      }
    }  
  }
  }
 void preorder(node *root){
   if(root!=NULL){
     cout<<"->"<<root->data;
     preorder(root->left);
     preorder(root->right);
   }
 }
 void inorder(node *root){
   if(root!=NULL){
     inorder(root->left);
     cout<<"->"<<root->data;
     inorder(root->right);
   }
 }
void postorder(node *root){
   if(root!=NULL){  
     postorder(root->left);
     postorder(root->right);
     cout<<"->"<<root->data;
   }
 }
int height (node *root){
  if(root==NULL)
    return 0;
  else
    return max(height(root->left),height(root->right))+1;
}
void min(node *root){
  if(root->left==NULL){
    cout<<"minimum data value is:"<<root->data;
  }
  else{
    min(root->left);
  }
}
void search (node *root) {
    node *curr;
    curr = root;
    int key;
  cout<<"Enter the to be searched:";
  cin>>key;
    while (curr != NULL) {
        if (curr -> data == key) {
            cout << key << " found";
            break;
        }
        else {
            if (key<curr -> data)
                curr = curr -> left;
            else
                curr = curr -> right;
        }
    }
    if (curr == NULL)
    {cout << key << " not found";}
}
void mirror(node *root){
  if(root==NULL){
    return;
  }
  else{
    mirror(root->left);
    mirror(root->right);
    swap(root->left,root->right);
  }
}
};
int main () {
    bst b;
    int ch;
    do {
        cout << "\n\n1.Create 2.Insert 3.Inorder 4.Preorder 5.Postorder 6.Search 7.Minimum 8.Height 9.Mirror\n";
        cout << "Your choice [1/2/3/4/5/6/7/8/9] ";
        cin >> ch;
        switch (ch) {
            case 1:
                b.create ();
                break;
            case 2:
                cout << '\n';
                b.insert ();
                break;
            case 3:
                cout << "\nInorder   traversal is:";
                b.inorder (b.root);
                break;
            case 4:
                cout << "\nPreorder  traversal is:";
                b.preorder (b.root);
                break;
            case 5:
                cout << "\nPostorder traversal is:";
                b.postorder (b.root);
                break;
            case 6:
                b.search(b.root);
                break;
            case 7:
                b.min(b.root);
                break;
            case 8:
                cout << "\nHeight of tree: " << b.height (b.root);
                break;
            case 9:
                b.mirror (b.root);
                cout << "\nTree is now mirrored!!!"
                     << "\nInorder   traversal is:";
                b.inorder (b.root);
                cout << "\nPreorder  traversal is:";
                b.preorder (b.root);
                cout << "\nPostorder traversal is:";
                b.postorder (b.root);
                break;
        }
    }while (ch < 10);
    return 0;
}
