#include <iostream>
#include <queue>
#include <vector>

using namespace std;

class flight {
    int n, i, j;
    int add[10][10];
    string city[10];

public:
    void input();
    void display();
    bool isConnected();
};

void flight::input() {
    cout << "enter no of cities:";
    cin >> n;
    cout << "enter the name of city:";
    for (int i = 0; i < n; i++)
        cin >> city[i];
    cout << "enter the time required to reach:" << endl;
    for (int i = 0; i < n; i++)
        for (int j = i; j < n; j++) {
            if (i == j) {
                add[i][j] = 0;
                continue;
            }
            cout << "time required from " << city[i] << " to " << city[j] << " is:" << endl;
            cin >> add[i][j];
            add[j][i] = add[i][j];
        }
}

void flight::display() {
    for (int i = 0; i < n; i++) {
        cout << "\n";
        for (int j = 0; j < n; j++) {
            cout << add[i][j] << "\t";
        }
    }
}

bool flight::isConnected() {
    vector<bool> visited(n, false);
    queue<int> q;

    // Start BFS from the first city
    q.push(0);
    visited[0] = true;

    while (!q.empty()) {
        int current = q.front();
        q.pop();

        // Visit all the adjacent cities
        for (int i = 0; i < n; i++) {
            if (add[current][i] != 0 && !visited[i]) {
                q.push(i);
                visited[i] = true;
            }
        }
    }

    // Check if all cities are visited
    for (int i = 0; i < n; i++) {
        if (!visited[i]) {
            return false;
        }
    }

    return true;
}

int main() {
    int ch;
    flight f;
    do {
        cout << "\nmenu" << endl
             << "1. input" << endl
             << "2. display" << endl
             << "3. check connectivity" << endl
             << "4. exit" << endl;
        cout << "enter your choice:";
        cin >> ch;
        switch (ch) {
            case 1:
                f.input();
                break;
            case 2:
                f.display();
                break;
            case 3:
                if (f.isConnected()) {
                    cout << "The graph is connected." << endl;
                } else {
                    cout << "The graph is not connected." << endl;
                }
                break;
            case 4:
                exit(0);
        }
    } while (ch < 5);

    return 0;
}
