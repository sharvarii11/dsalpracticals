A Dictionary stores keywords & its meanings. Provide facility for adding new keywords,
deleting keywords, updating values of any entry. Provide facility to display whole data
sorted in ascending/ Descending order. Also find how many maximum comparisons may
require for finding any keyword. Use Height balance tree and find the complexity for
finding a keyword


#include <iostream>
using namespace std;

struct AVLnode {
    public:
    int cWord;
    string cMean;
    AVLnode *left,*right;
    int iHt;
};

class AVLtree {

public:
    AVLnode *Root;
    AVLtree () {
        Root = NULL;
    }
    AVLnode* insert (AVLnode*, int, string);
    AVLnode* deletE (AVLnode*, int);
    AVLnode* LL (AVLnode*);
    AVLnode* RR (AVLnode*);
    AVLnode* LR (AVLnode*);
    AVLnode* RL (AVLnode*);
    int height (AVLnode*);
    int bFactor (AVLnode*);
    void asend (AVLnode*);
    void descend (AVLnode*);
    void search(AVLnode*,int key);
    void update(AVLnode*root,int key);
    
};


AVLnode* AVLtree::insert (AVLnode *root, int nWord, string nMean) {
    if (root == NULL) {
        root = new AVLnode;
        root -> left = root -> right = NULL;
        root -> cWord = nWord;
        root -> cMean = nMean;
        root -> iHt = 0;
    }

    else if (root -> cWord != nWord) {
        if (root -> cWord > nWord)
            root -> left = insert (root -> left, nWord, nMean);

        else
            root -> right = insert (root -> right, nWord, nMean);
    }

    else
        cout << "\nRedundant AVLnode\n";

    root -> iHt = max(height(root -> left), height(root -> right)) + 1;

    if (bFactor (root) == 2) {
        if (root -> left -> cWord > nWord)
            root = RR (root);
        else
            root = LR (root);
    }

    if (bFactor (root) == -2) {
        if (root -> right -> cWord > nWord)
            root = RL (root);
        else
            root = LL (root);
    }

    return root;
}


AVLnode *AVLtree::deletE (AVLnode *curr, int x) {
    AVLnode *temp;
    if (curr == NULL) {
        cout << "\nWord not present!\n";
        return curr;
    }

    else if (x > curr -> cWord)
        curr -> right = deletE (curr -> right, x);

    else if (x < curr -> cWord)
        curr -> left = deletE (curr -> left, x);

    else if (curr -> right == NULL || curr -> left == NULL) {
        curr = curr -> left ? curr -> left : curr -> right;
        cout << "\nWord deleted Successfully!\n";
    }

    else {
        temp = curr -> right;
        while (temp -> left)
            temp = temp -> left;
        curr -> cWord = temp -> cWord;
        curr -> right = deletE (curr -> right, temp -> cWord);
    }

    if (curr == NULL) return curr;

    curr -> iHt = max(height(curr -> left), height(curr -> right)) + 1;

    if (bFactor (curr) == 2) {
        if (bFactor (curr -> left) >= 0)
            curr = RR (curr);
        else
            curr = LR (curr);
    }

    if (bFactor (curr) == -2) {
        if (bFactor (curr -> right) <= 0)
            curr = LL (curr);
        else
            curr = RL (curr);
    }

    return (curr);
}


int AVLtree::height (AVLnode* curr) {
    if (curr == NULL)
        return -1;
    else
        return curr -> iHt;
}


int AVLtree::bFactor (AVLnode* curr) {
    int lh = 0, rh = 0;
    if (curr == NULL)
        return 0;
    else
        return height(curr -> left) - height(curr -> right);
}


AVLnode* AVLtree::RR (AVLnode* curr) {
    AVLnode* temp = curr -> left;
    curr -> left = temp -> right;
    temp -> right = curr;
    curr -> iHt = max(height(curr -> left), height(curr -> right)) + 1;
    temp -> iHt = max(height(temp -> left), height(temp -> right)) + 1;
    return temp;
}


AVLnode* AVLtree::LL (AVLnode* curr) {
    AVLnode* temp = curr -> right;
    curr -> right = temp -> left;
    temp -> left = curr;
    curr -> iHt = max(height(curr -> left), height(curr -> right)) + 1;
    temp -> iHt = max(height(temp -> left), height(temp -> right)) + 1;
    return temp;
}


AVLnode* AVLtree::RL (AVLnode* curr) {
    curr -> right = RR (curr -> right);
    return LL (curr);
}


AVLnode* AVLtree::LR (AVLnode* curr) {
    curr -> left = LL (curr -> left);
    return RR (curr);
}


void AVLtree::asend(AVLnode* curr) {
    if (curr != NULL) {
       asend(curr -> left);
        cout << "\n\t" << curr -> cWord << "\t" << curr -> cMean;
       descend(curr -> right);
    }
}
void AVLtree::descend(AVLnode* curr) {
    if (curr != NULL) {
        descend(curr -> right);
        cout << "\n\t" << curr -> cWord << "\t" << curr -> cMean;
        descend (curr -> left);
    }
}

void AVLtree:: search(AVLnode*root,int key){
    AVLnode *curr=root;
  int cost=0;
    while(curr!=NULL){
        if (key>curr->cWord){
            cost++;
            curr=curr->right;
        }
        else if (key<curr->cWord){
            cost++;
            curr=curr->left;
        }
         else if (key==curr->cWord){
           cost++;
           cout<<"key found at cost: "<<cost;
           return;
        }
    }
        cout<<"not found";
    }

void AVLtree:: update(AVLnode*root,int key){
    AVLnode *curr=root;
  
    while(curr!=NULL){
        if (key>curr->cWord){
            curr=curr->right;
        }
        else if (key<curr->cWord){
            curr=curr->left;
        }
         else if (key==curr->cWord){
           cout<<"key found enter the meaning to update.";
           cin>>curr->cMean;
           return;
        }
    }
        cout<<"key not found";
    }



int main () {
    int ch;
    AVLtree avl;
    AVLnode *temp = NULL;
    int word;
    string mean;

    cout << "\n--------------------------------------";
    cout << "\n\tAVL TREE IMPLEMENTATION";
    cout << "\n--------------------------------------";
    do {
        cout << "\n\t\tMENU";
        cout << "\n1.Insert 2.print ascending 3.print descending 4.Delete 5.search. 6.update 7.exit.";
        cout << "\n--------------------------------";
        cout << "\nEnter your choice: ";
        cin >> ch;

        switch (ch) {
            case 1:
                cout << "\nEnter Word: ";
                cin >> word;
                cout << "\nEnter Meaning: ";
                cin >> mean;
                avl.Root = avl.insert (avl.Root, word, mean);
                break;
            case 2:
                cout << "\n\nascending order: ";
                avl.asend(avl.Root);
                cout << '\n';
                break;    
            
            case 3:
                cout << "\n\ndescending order: ";
                avl.descend (avl.Root);
                cout << '\n';
                break;
            case 4:
                cout << "\nEnter the word to be deleted : ";
                cin >> word;
                avl.Root = avl.deletE (avl.Root, word);
                break;
            case 5:
                cout<<"Enter the key to be search: ";
                int key;
                cin>>key;
                avl.search(avl.Root,key);
                break;
            case 6:
                cout<<"Enter the key from where you want to update Meaning: ";
                cin>>key;
                avl.update(avl.Root,key);
                break;
            case 7:
                exit(0);
        }
    } while (ch != 7);

    return 0;
}
